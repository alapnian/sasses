////
///	█▀    ▄▀█    █▀    █▀    █▀▀    █▀
///	▄█    █▀█    ▄█    ▄█    ██▄    ▄█
///	𝑃𝑟𝑜𝑣𝑖𝑑𝑒𝑠 𝑚𝑜𝑟𝑒 𝑎𝑑𝑣𝑎𝑛𝑐𝑒𝑑 𝑆𝑎𝑠𝑠 𝑚𝑜𝑑𝑢𝑙𝑒𝑠
///
///	(c)	2025 Alapnian <support@alapnian.com>
///	</>	Powered by XVIID <alapnian@xviid.net>
///
///	For the full copyright and license information, please view
///	the LICENSE file that was distributed with this source code.
////

@charset 'UTF-8'

@use 'sass:meta'


/// 
/// Returns the mixin value named $name.
/// 
/// @param	{String}	$name	- Mixin name.
/// @param	{String}	$module	- Module name matching the namespace of a @use rule in the current file.
/// @return	{Function}	The returned mixin can be included using meta.apply().
/// 
/// @example	scss
/// 	@use 'sass:string';
/// 	@use '@alapnian/sass-modules/meta';
/// 
/// 	@mixin apply-to-all($mixin, $list) {
/// 	  @each $element in $list {
/// 	    @include meta.apply($mixin, $element);
/// 	  }
/// 	}
/// 	
/// 	@mixin font-class($size) {
/// 	  .font-#{$size} {
/// 	    font-size: $size;
/// 	  }
/// 	}
/// 	
/// 	$sizes: [8px, 12px, 2rem];
/// 	
/// 	@include apply-to-all(meta.get-mixin("font-class"), $sizes);
/// 
/// @example	css Output
/// 	.font-8px {
/// 	  font-size: 8px;
/// 	}
/// 	
/// 	.font-12px {
/// 	  font-size: 12px;
/// 	}
/// 	
/// 	.font-2rem {
/// 	  font-size: 2rem;
/// 	}
/// 
/// @access	public
/// @require	meta.get-mixin
/// 
/// @group	SassMetaModule
/// @author	Dyon Mulya
/// @since	1.0.0
/// 
@function get-mixin($name, $module: null)

	@return meta.get-mixin($name, $module)