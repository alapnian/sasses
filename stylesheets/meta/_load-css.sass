////
///	█▀    ▄▀█    █▀    █▀    █▀▀    █▀
///	▄█    █▀█    ▄█    ▄█    ██▄    ▄█
///	𝑃𝑟𝑜𝑣𝑖𝑑𝑒𝑠 𝑚𝑜𝑟𝑒 𝑎𝑑𝑣𝑎𝑛𝑐𝑒𝑑 𝑆𝑎𝑠𝑠 𝑚𝑜𝑑𝑢𝑙𝑒𝑠
///
///	(c)	2025 Alapnian <support@alapnian.com>
///	</>	Powered by XVIID <alapnian@xviid.net>
///
///	For the full copyright and license information, please view
///	the LICENSE file that was distributed with this source code.
////

@charset 'UTF-8'

@use 'sass:meta'


/// 
/// Loads the module at $url and includes its CSS as though it were written as the contents of this mixin.
/// 
/// @param	{String}	$url	- Mixin value with meta.get-mixin().
/// @param	{null|Map}	$with	- Provides configuration for the modules; if it’s passed, it must be a map from variable names (without $) to the values of those variables to use in the loaded module.
/// @output	Loads the module at $url and includes its CSS as though it were written as the contents of this mixin.
/// 
/// @example	scss - Create dark-theme/_code.scss
/// 	$border-contrast: false !default;
///
/// 	code {
/// 	   background-color: #6b717f;
/// 	   color: #d2e1dd;
/// 	   @if $border-contrast {
/// 	      border-color: #dadbdf;
/// 	   }
/// 	}
/// 
/// @example	scss - Create style.scss
/// 	@use "@alapnian/sass-modules/meta";
/// 
/// 	body.dark {
/// 	   @include meta.load-css("dark-theme/code", $with: ("border-contrast": true));
/// 	}
/// 
/// @example	css - CSS Output from style.scss
/// 	body.dark code {
/// 	   background-color: #6b717f;
/// 	   color: #d2e1dd;
/// 	   border-color: #dadbdf;
/// 	}
/// 
/// @access	public
/// @require	meta.load-css
/// 
/// @group	SassMetaModule
/// @author	Dyon Mulya
/// @since	1.0.0
/// 
@mixin load-css($url, $with: null)

	@include meta.load-css($url, $with)